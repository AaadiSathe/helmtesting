name: Deploy to Kind with Helm

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action: upgrade or rollback'
        required: true
        default: 'upgrade'
        type: choice
        options:
          - upgrade
          - rollback
      environment:
        description: 'Deployment environment (e.g., dev, staging, prod)'
        required: true
      service_name:
        description: 'Service name to deploy or rollback'
        required: true
      revision:
        description: 'Revision number (optional for rollback, defaults to last successful)'
        required: false

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Deployment Variables
        run: |
          RELEASE_NAME=${{ github.event.inputs.environment }}-${{ github.event.inputs.service_name }}
          NAMESPACE=${{ github.event.inputs.environment }}
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV

      - name: Deploy or Rollback Helm charts
        run: |
          if [ "${{ github.event.inputs.action }}" == "upgrade" ]; then
            CHART_PATH=./helm/${{ github.event.inputs.service_name }}
            if [ -d "$CHART_PATH" ]; then
              echo "Deploying/upgrading chart: $RELEASE_NAME in namespace: $NAMESPACE"
              helm upgrade --install $RELEASE_NAME $CHART_PATH --create-namespace --namespace $NAMESPACE
            else
              echo "Chart directory $CHART_PATH not found!"
              exit 1
            fi
          elif [ "${{ github.event.inputs.action }}" == "rollback" ]; then
            if [ -z "${{ github.event.inputs.revision }}" ]; then
              latest_successful_revision=$(helm history $RELEASE_NAME --max 1 --output json | jq -r '.[0].revision')
              echo "No revision specified, rolling back to last successful revision: $latest_successful_revision"
            else
              latest_successful_revision=${{ github.event.inputs.revision }}
            fi
            
            if [ -z "$latest_successful_revision" ]; then
              echo "Could not determine last successful revision!"
              exit 1
            fi
            
            echo "Rolling back release: $RELEASE_NAME to revision $latest_successful_revision"
            helm rollback $RELEASE_NAME $latest_successful_revision
            
            # Log rollback history
            helm history $RELEASE_NAME
          fi

      - name: Notify on Rollback Failure
        if: failure()
        run: |
          echo "Rollback failed for release: $RELEASE_NAME"
