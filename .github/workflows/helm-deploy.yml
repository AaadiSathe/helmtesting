name: Deploy or Rollback Helm Chart Locally

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action: upgrade, rollback, or update-image'
        required: true
        default: 'upgrade'
        type: choice
        options:
          - upgrade
          - rollback
          - update-image
      chart_version:
        description: 'Helm chart version (ignored for local charts)'
        required: false
      app_image_tag:
        description: 'App Docker image tag (e.g., 1.17.0)'
        required: false
      release_name:
        description: 'Helm release name'
        required: true
      namespace:
        description: 'Kubernetes namespace'
        required: true
      revision:
        description: 'Revision number (only for rollback)'
        required: false

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Deployment Variables
        run: |
          echo "CHART_PATH=./helm/sample-app" >> $GITHUB_ENV
          echo "RELEASE_NAME=${{ github.event.inputs.release_name }}" >> $GITHUB_ENV
          echo "NAMESPACE=${{ github.event.inputs.namespace }}" >> $GITHUB_ENV
          [ -n "${{ github.event.inputs.chart_version }}" ] && echo "CHART_VERSION=${{ github.event.inputs.chart_version }}" >> $GITHUB_ENV
          [ -n "${{ github.event.inputs.app_image_tag }}" ] && echo "IMAGE_TAG=${{ github.event.inputs.app_image_tag }}" >> $GITHUB_ENV

      - name: Ensure Namespace Exists
        run: |
          if ! kubectl get namespace "$NAMESPACE" &>/dev/null; then
            kubectl create namespace "$NAMESPACE"
          fi

      - name: Verify Helm Chart Exists
        run: |
          if [ ! -d "$CHART_PATH" ]; then
            echo "Error: Helm chart directory not found at $CHART_PATH!"
            exit 1
          fi
          if [ ! -f "$CHART_PATH/values.yaml" ]; then
            echo "Error: values.yaml not found in $CHART_PATH!"
            exit 1
          fi

      - name: Validate Helm Chart
        run: helm lint "$CHART_PATH"

      - name: Deploy or Rollback Helm Chart
        run: |
          case "${{ github.event.inputs.action }}" in
            upgrade)
              HELM_CMD="helm upgrade --install $RELEASE_NAME $CHART_PATH --namespace $NAMESPACE"
              [ -n "$IMAGE_TAG" ] && HELM_CMD="$HELM_CMD --set image.tag=$IMAGE_TAG"
              echo "Running: $HELM_CMD"
              eval "$HELM_CMD"
              helm history "$RELEASE_NAME" --namespace "$NAMESPACE" -o json > ./helm_revisions.json
              ;;
            
            rollback)
              if ! helm list --namespace "$NAMESPACE" -q | grep -q "^$RELEASE_NAME$"; then
                echo "Error: Release '$RELEASE_NAME' not found. Cannot rollback."
                exit 1
              fi
              
              if [ -z "${{ github.event.inputs.revision }}" ]; then
                latest_revision=$(helm history "$RELEASE_NAME" --namespace "$NAMESPACE" --max 1 --output json | jq -r '.[0].revision')
                echo "No revision specified, rolling back to last successful revision: $latest_revision"
              else
                latest_revision="${{ github.event.inputs.revision }}"
              fi
              
              if [ -z "$latest_revision" ]; then
                echo "Could not determine last successful revision!"
                exit 1
              fi
              
              echo "Rolling back release: $RELEASE_NAME to revision $latest_revision"
              helm rollback "$RELEASE_NAME" "$latest_revision" --namespace "$NAMESPACE"
              helm history "$RELEASE_NAME" --namespace "$NAMESPACE"
              ;;
          esac

      - name: Update Image Without Redeploying
        if: github.event.inputs.action == 'update-image'
        run: |
          DEPLOYMENT_NAME=$(kubectl get deployment -n "$NAMESPACE" -o jsonpath="{.items[?(@.metadata.name=='$RELEASE_NAME')].metadata.name}")
          if [ -z "$DEPLOYMENT_NAME" ]; then
            echo "Error: Deployment $RELEASE_NAME not found in namespace $NAMESPACE"
            exit 1
          fi
          
          CONTAINER_NAME=$(kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o jsonpath="{.spec.template.spec.containers[0].name}")
          kubectl set image deployment/"$DEPLOYMENT_NAME" "$CONTAINER_NAME"=your-image:"$IMAGE_TAG" -n "$NAMESPACE"

      - name: Verify Deployment
        if: github.event.inputs.action == 'upgrade'
        run: helm list --namespace "$NAMESPACE"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "Deployment failed for release: $RELEASE_NAME"
          # Add Slack or Teams notification integration
